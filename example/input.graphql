# FRAGMENTS 

fragment Profile on users {
  uid : uid
  photoURL: photo_url
  displayName : display_name
  creationTime : created_at
  lastUpdatedTime : updated_at
  country : country 
}

fragment Foro on foros {
  category: category
  creationTime: created_at
  displayName: display_name
  foroID: foro_id
  lastUpdatedTime: updated_at
  postsCount: posts_count
  createdByUID: created_by
  description: description
  language: language
  country: country
  membership: user_membership {
    ...Membership
  }
}


fragment Membership on memberships {
  role: role
  joinedAt: joined_at
  membershipID: membership_id
  uid: uid
  foroID: foro_id
  unseenPosts : unseen_posts
}

fragment Convo on inbox_view {
  otherUID: other_uid
  lastMessageContent: content
  lastUpdatedTime: last_updated_time
  unreadMessagesCount: unread_messages
  otherProfile: other_profile {
    ...Profile
  }
}

fragment Message on messages_view {
  messageID: message_id
  messageContent: content
  isSender: is_sender
  otherUID: other_uid
  isRead: is_read
  isSeen: is_seen
  creationTime: created_at
  uid: uid
  senderLocalMessageID: sender_local_message_id
  parentID: parent_id
}

# NOTE: any operation uses this fragment must have the following in its parameters:
#     - `$withCreatorProfile: Boolean!` 
fragment Post on posts {
  creationTime: created_at
  lastUpdatedTime: updated_at
  postID: post_id
  postContent: post_content
  foroID: foro_id
  reactionsCount: reactions_count
  commentsCount: comments_count
  # computed field basd on x-hasura-user-id
  reaction : user_reaction_to_post
  title : title
  createdByUID : created_by
  isSeen : is_seen
  creator: creator @include(if: $withCreatorProfile) {
    ...Profile
  }
}

# NOTE: any operation uses this fragment must have the following in its parameters:
#     - `$withCreatorProfile: Boolean!` 
#     - `$withPost: Boolean!` 
fragment Comment on comments {
    commentID : comment_id
    postID : post_id
    foroID : foro_id
    creationTime : created_at
    reactionsCount : reactions_count
    commentContent : comment_content
    lastUpdatedTime : updated_at
    reaction : user_reaction_to_comment
    createdByUID: created_by
    creator: creator @include(if: $withCreatorProfile) {
    ...Profile
  }
    post: post @include(if: $withPost) {
    ...Post
  }
}


fragment Notification on notifications {
  notificationID: notification_id
  notificationType: notification_type
  creationTime: created_at
  lastUpdatedTime : updated_at
  isSeen: is_seen
  isRead: is_read
  notifierProfile: notifier_profile {
    ...Profile
  }
  # json object where keys are defined in the notification_types table
  notificationDetails: notification_details
}


# --------------------------------------------------------- MUTATIONS



mutation UpdateProfilePhotoURL($uid: String!, $photo_url: String!) {
  profile : update_users_by_pk(pk_columns: {uid: $uid}, _set: {photo_url: $photo_url}) {
   photoURL : photo_url
  }
}

mutation UpdateProfileDisplayName($uid: String!, $display_name: String!) {
  profile : update_users_by_pk(pk_columns: {uid: $uid}, _set: {display_name: $display_name}) {
   displayName : display_name
  }
}

mutation UpdateProfileCountry($uid: String!, $country: String!) {
  profile : update_users_by_pk(pk_columns: {uid: $uid}, _set: {country: $country}) {
   country : country
  }
}

# role is not returned here and should be added on the client if the request is successful 
mutation CreateForo($display_name: String!, $description: String!, $category: String = "others") {
  foro : insert_foros_one(object: {display_name: $display_name, description: $description, category: $category}) {
  ...Foro
  }
}

mutation JoinForo($uid: String!, $foroID: String!) {
  insert_memberships_one(object: {foro_id: $foroID, uid: $uid}) {
    role : role
  }
}

mutation LeaveForo($uid: String!, $foroID: String!) {
  delete_memberships(where: {foro_id: {_eq: $foroID}, uid: {_eq: $uid}}) {
     __typename
  }
}


mutation UpdateForoDisplayName($foroID: String!, $display_name: String!) {
 foro :  update_foros_by_pk(pk_columns: {foro_id: $foroID}, _set: {display_name: $display_name}) {
    displayName : display_name
  }
}


mutation CreatePost($post_content: String!, $title: String!, $foro_id: String!, $withCreatorProfile: Boolean! = false) {
 post : insert_posts_one(object: {post_content: $post_content, title: $title, foro_id: $foro_id}) {
    ...Post
  }
}


mutation UpdatePost($post_id: String!, $post_content: String!, $withCreatorProfile: Boolean! = false) {
  post: update_posts_by_pk(pk_columns: {post_id: $post_id}, _set: {post_content: $post_content}) {
    ...Post
  }
}


mutation DeletePost($post_id: String!) {
  delete_posts_by_pk(post_id: $post_id) {
    __typename
  }
}


mutation CreateComment($postID: String!, $commentContent: String!, $withCreatorProfile: Boolean! = false, $withPost: Boolean! = false) {
  comment: insert_comments_one(object: {post_id: $postID, comment_content: $commentContent}) {
    ...Comment
  }
}


mutation UpdateComment($comment_id: String!, $comment_content: String!, $withCreatorProfile: Boolean! = false, $withPost: Boolean! = false) {
  comment : update_comments_by_pk(pk_columns: {comment_id: $comment_id}, _set: {comment_content: $comment_content}) {
    ...Comment
  }
}

# the comments table have a trigger that will do the following: 
# if the comment has no replies, delete it.
# if the comment has replies, update it (affected rows = 0) & mark it as ['comment was deleted'] and change the `created_by` to a 'ghost' user (similar to github)
# the query will return null for the second case
# maybe when hasura 1.4, which will support tracking volatile functions, we can use a function instead.
mutation DeleteComment($comment_id: String!) {
  delete_comments_by_pk(comment_id: $comment_id) {
    __typename
  }
}


# ---------- Reactions

# react to post  
mutation ReactToPost($postID: String!, $reaction: String = "like") {
  reaction: insert_posts_reactions_one(object: {post_id: $postID, reaction: $reaction}) {
    reaction: reaction
  }
}

#  unreact to post  
mutation UnReactToPost($postID: String!) {
  delete_posts_reactions(where: {post_id: {_eq: $postID}}) {
    __typename
  }
}

# note: the post needs to be extracted
query GetLikedPosts($uid: String!, $afterCreationTime: timestamptz = null, $beforeCreationTime: timestamptz = null, $limit: Int = 10, $creationTimeSortOrder: order_by = desc, $withCreatorProfile: Boolean! = true) {
  likedPosts: posts_reactions(where: {uid: {_eq: $uid}, created_at: {_gt: $afterCreationTime, _lte: $beforeCreationTime}}, limit: $limit, order_by: {created_at: $creationTimeSortOrder}) {
    post {
      ...Post
    }
  }
}


# react to comment
mutation ReactToComment($commentID: String!, $reaction: String! = "like") {
  insert_comments_reactions_one(object: {comment_id: $commentID, reaction: $reaction}) {
    reaction : reaction
  }
}

# unreact to comment   
mutation UnReactToComment($commentID: String!) {
  delete_comments_reactions(where: {comment_id: {_eq: $commentID}}) {
    __typename
  }
}

# note: the comment needs to be extracted
query GetLikedComments($uid: String!, $afterCreationTime: timestamptz = null, $beforeCreationTime: timestamptz = null, $limit: Int = 10, $creationTimeSortOrder: order_by = desc, $withCreatorProfile: Boolean! = true, $withPost: Boolean! = false) {
  likedComments: comments_reactions(where: {uid: {_eq: $uid}, created_at: {_gt: $afterCreationTime, _lte: $beforeCreationTime}}, limit: $limit, order_by: {created_at: $creationTimeSortOrder}) {
    comment : comment {
      ...Comment
    }
  }
}

# we only need the message_id for this task since all the other message component are available. 
mutation SendMessage($content: String!, $receiver_uid: String!, $sender_local_message_id: String!, $parent_id: String = null,) {
  message : insert_messages_one(object: {content: $content, receiver_uid: $receiver_uid, sender_local_message_id: $sender_local_message_id, parent_id: $parent_id,}) {
    messageID : message_id
  }
}


# --------------------------------------------------------- QUERIES 

query GetForoByID($foroID: String!) {
  foro: foros_by_pk(foro_id: $foroID) {
		...Foro
  }
}

# show foros where the user is not a member (note this is a top level function, not querying foros table directly)
# need to allow querying: newest, most users, most posts, ... etc.
# also, need to allow searching and further filtering by country, language, etc. 
query GetForosForExplore($category: String = null, $limit: Int = null, $creationTimeSortOrder: order_by = desc) {
  foros: get_foros_for_explore(limit: $limit, where: {category: {_eq: $category}}) {
    ...Foro
  }
}
# alternative approach for ForosExplore: 
# Instead of a top level function, query the foros table and filter by `user_role` == null. `user_role` is a computed field on foros table. 
# query getForosForExplore($limit: Int = 50, $afterLastUpdatedTime: timestamptz = null, $beforeLastUpdatedTime: timestamptz = null, $lastUpdatedTimeSortOrder: order_by = desc, $_neq: String = "uid") {
#   foros: foros(limit: $limit, where: {user_role: {_is_null: true}, updated_at: {_gte: $afterLastUpdatedTime, _lte: $beforeLastUpdatedTime}}, order_by: {updated_at: $lastUpdatedTimeSortOrder}) {
#     ...Foro
#   }
# }

# note: here we are filtering by `memberships` and not by `user_membership` since the latter is a computed field for the user making the request only
query GetJoinedForos($uid: String!, $limit: Int = 50, $afterLastUpdatedTime: timestamptz = null, $beforeLastUpdatedTime: timestamptz = null, $lastUpdatedTimeSortOrder: order_by = desc) {
  foros: foros(limit: $limit, where: {memberships: {uid: {_eq: $uid}}, updated_at: {_gte: $afterLastUpdatedTime, _lte: $beforeLastUpdatedTime}}, order_by: {updated_at: $lastUpdatedTimeSortOrder}) {
    ...Foro
  }
}

subscription JoinedForosStream($uid: String!, $limit: Int = 50, $afterLastUpdatedTime: timestamptz = null, $beforeLastUpdatedTime: timestamptz = null, $lastUpdatedTimeSortOrder: order_by = desc) {
  foros: foros(limit: $limit, where: {memberships: {uid: {_eq: $uid}}, updated_at: {_gte: $afterLastUpdatedTime, _lte: $beforeLastUpdatedTime}}, order_by: {updated_at: $lastUpdatedTimeSortOrder}) {
    ...Foro
  }
}


query GetForoMembers($foroID: String!, $afterJoinedAtDate: timestamptz = null, $roles: [String!]!) {
  memberships: memberships(where: {foro_id: {_eq: $foroID}, joined_at: {_gte: $afterJoinedAtDate}, role: {_in: $roles}}, order_by: {joined_at: asc}) {
    membershipID: membership_id
    uid: uid
    foroID: foro_id
    role: role
    joinedAt: joined_at
    profile: user {
      ...Profile
    }
  }
}

# -------- Convos and Messages


# get conversations 
query GetConversations($afterLastUpdatedTime: timestamptz = null, $beforeLastUpdatedTime: timestamptz = null, $limit: Int = null, $lastUpdatedTimeSortOrder: order_by = desc) {
  conversations: inbox_view(where: {last_updated_time: {_gt: $afterLastUpdatedTime, _lte: $beforeLastUpdatedTime}}, limit: $limit, order_by: {last_updated_time: $lastUpdatedTimeSortOrder},) {
    ...Convo
  }
}

subscription ConversationsStream($afterLastUpdatedTime: timestamptz = null, $beforeLastUpdatedTime: timestamptz = null, $limit: Int = null, $lastUpdatedTimeSortOrder: order_by = desc) {
  conversations: inbox_view(where: {last_updated_time: {_gt: $afterLastUpdatedTime, _lte: $beforeLastUpdatedTime}}, limit: $limit, order_by: {last_updated_time: $lastUpdatedTimeSortOrder},) {
    ...Convo
  }
}



# TODO: remove sort order in messages_view in the database since it's redundant. 
query GetMessages($other_uid: String!, $afterCreationTime: timestamptz = null, $beforeCreationTime: timestamptz = null, $limit: Int = null, $creationTimeSortOrder: order_by = desc) {
  messages: messages_view(where: {created_at: {_gt: $afterCreationTime, _lt: $beforeCreationTime}, other_uid: {_eq: $other_uid}}, limit: $limit, order_by: {created_at: $creationTimeSortOrder}) {
    ...Message
  }
}

subscription MessagesStream($other_uid: String!, $afterCreationTime: timestamptz = null, $beforeCreationTime: timestamptz = null, $limit: Int = null, $creationTimeSortOrder: order_by = desc) {
  messages: messages_view(where: {created_at: {_gt: $afterCreationTime, _lt: $beforeCreationTime}, other_uid: {_eq: $other_uid}}, limit: $limit, order_by: {created_at: $creationTimeSortOrder}) {
    ...Message
  }
}

mutation MarkConversationAsRead($other_uid: String!) {
  update_messages_status(where: {other_uid: {_eq: $other_uid}, is_read: {_eq: false}}, _set: {is_read: true, is_seen: true}) {
    __typename
  }
}


# we could make this nullable to mark all messages as seen for the specific user
mutation MarkInboxAsSeen {
  update_messages_status(where: {is_seen: {_eq: false}}, _set: {is_seen: true}) {
    __typename
  }
}

# this will mark message status as deleted for the current user only (using x-hasura-user-id)
mutation DeleteMessage($message_id: String!) {
  update_messages_status(where: {message_id: {_eq: $message_id}}, _set: {is_deleted: true}) {
    __typename
  }
}

subscription UnseenMessagesCount {
  aggFun : messages_status_aggregate(where: {is_seen: {_eq: false}}) {
    aggObj: aggregate {
      count : count
    }
  }
}


# -------- Posts


query GetForoPosts($foroID: String!, $afterCreationTime: timestamptz = null, $beforeCreationTime: timestamptz = null, $creationTimeSortOrder: order_by = desc, $limit: Int = null,  $withCreatorProfile: Boolean! = true) {
  posts: posts(where: {foro_id: {_eq: $foroID}, created_at: {_gt: $afterCreationTime, _lt: $beforeCreationTime}}, order_by: {created_at: $creationTimeSortOrder}, limit: $limit) {
    ...Post
  }
}

subscription foroPostsStream($foroID: String!, $afterCreationTime: timestamptz = null, $beforeCreationTime: timestamptz = null, $creationTimeSortOrder: order_by = desc, $limit: Int = null,  $withCreatorProfile: Boolean! = true) {
  posts: posts(where: {foro_id: {_eq: $foroID}, created_at: {_gt: $afterCreationTime, _lt: $beforeCreationTime}}, order_by: {created_at: $creationTimeSortOrder}, limit: $limit) {
    ...Post
  }
}

query GetMostLikedPosts($foroID: String!, $limit: Int = null,  $withCreatorProfile: Boolean! = true) {
  posts: posts(where: {foro_id: {_eq: $foroID}}, order_by: {reactions_count: desc}, limit: $limit) {
    ...Post
  }
}

query GetMostCommentedPots($foroID: String!, $limit: Int = null, $withCreatorProfile: Boolean! = true ) {
  posts: posts(where: {foro_id: {_eq: $foroID}}, order_by: {comments_count: desc}, limit: $limit) {
    ...Post
  }
}


query GetPostByID($postID: String!, $withCreatorProfile: Boolean! = false) {
  post : posts_by_pk(post_id: $postID) {
    ...Post
  }
}


query GetUserPosts($uid: String!, $afterCreationTime: timestamptz = null, $beforeCreationTime: timestamptz = null, $creationTimeSortOrder: order_by = desc, $limit: Int = null,  $withCreatorProfile: Boolean! = false) {
  posts: posts(where: {created_by: {_eq: $uid}, created_at: {_gt: $afterCreationTime, _lt: $beforeCreationTime}}, order_by: {created_at: $creationTimeSortOrder}, limit: $limit) {
    ...Post
  }
}

# -------- comments


query GetPostComments($postID: String!, $afterCreationTime: timestamptz = null, $beforeCreationTime: timestamptz = null, $creationTimeSortOrder: order_by = desc, $limit: Int = null, $withCreatorProfile: Boolean! = true, $withPost: Boolean! = false) {
  comments: comments(where: {post_id: {_eq: $postID}, created_at: {_gt: $afterCreationTime, _lt: $beforeCreationTime}}, order_by: {created_at: $creationTimeSortOrder}, limit: $limit) {
    ...Comment
  }
}

subscription PostCommentsStream($postID: String!, $afterCreationTime: timestamptz = null, $beforeCreationTime: timestamptz = null, $creationTimeSortOrder: order_by = desc, $limit: Int = null, $withCreatorProfile: Boolean! = true, $withPost: Boolean! = false) {
  comments: comments(where: {post_id: {_eq: $postID}, created_at: {_gt: $afterCreationTime, _lt: $beforeCreationTime}}, order_by: {created_at: $creationTimeSortOrder}, limit: $limit) {
    ...Comment
  }
}


query GetCommentByID($commentID: String!, $withCreatorProfile: Boolean! = true, $withPost: Boolean! = false) {
   comment: comments_by_pk(comment_id: $commentID) {
    ...Comment
  }
}

# the post and profile are useful here since all can be shown in the same place (user comments tab on the profile)
query GetUserComments($uid: String!, $afterCreationTime: timestamptz = null, $beforeCreationTime: timestamptz = null, $creationTimeSortOrder: order_by = desc, $limit: Int = null, $withCreatorProfile: Boolean! = true, $withPost: Boolean! = false) {
  comments: comments(where: {created_by: {_eq: $uid}, created_at: {_gt: $afterCreationTime, _lt: $beforeCreationTime}}, order_by: {created_at: $creationTimeSortOrder}, limit: $limit) {
    ...Comment
  }
}

# ---------- Profile

mutation CreateUserProfile($display_name: String!, $photo_url: String!) {
  profile: insert_users(objects: {display_name: $display_name, photo_url: $photo_url}, on_conflict: {constraint: users_pkey, update_columns: [display_name, photo_url]}) {
    __typename
  }
}


query GetUserProfile($uid: String!) {
  profile : users_by_pk(uid: $uid) {
   ...Profile
  }
}

# -------- Notifications 


query GetNotifications($afterCreationTime: timestamptz = null, $beforeCreationTime: timestamptz = null, $limit: Int = null,  $creationTimeSortOrder: order_by = desc) {
  notifications: notifications(where: {created_at: {_gt: $afterCreationTime, _lt: $beforeCreationTime}}, order_by: {created_at: $creationTimeSortOrder}, limit: $limit) {
    ...Notification
  }
}

mutation MarkNotificationAsRead($notification_id: String!) {
  update_notifications(where: {notification_id: {_eq: $notification_id}, is_read: {_eq: false}}, _set: {is_read: true}) {
    __typename
  }
}

mutation MarkNotificationsAsSeen {
  update_notifications(where: {is_seen: {_eq: false}}, _set: {is_seen: true}) {
    __typename
  }
}

mutation DeleteNotification($notification_id: String!) {
  update_notifications(where: {notification_id: {_eq: $notification_id}}, _set: {is_deleted: true}) {
    __typename
  }
}

subscription UnseenNotificationsCount {
  aggFun : notifications_aggregate(where: {is_seen: {_eq: false}}) {
    aggObj : aggregate {
      count : count
    }
  }
}

subscription NotificationsStream($afterCreationTime: timestamptz = null, $beforeCreationTime: timestamptz = null, $limit: Int = null, $creationTimeSortOrder: order_by = desc) {
  notifications: notifications(where: {created_at: {_gt: $afterCreationTime, _lt: $beforeCreationTime}}, limit: $limit, order_by: {created_at: $creationTimeSortOrder}) {
    ...Notification
  }
}

mutation AddForoVisit($foro_id: String!, $visited_from: String = "") {
  insert_foro_visits_one(object: {foro_id: $foro_id, visited_from: $visited_from}, on_conflict: {constraint: foro_visits_pkey, update_columns: [visited_from]}) {
    __typename
  }
}

mutation AddPostVisit($post_id: String!, $visited_from: String = "") {
  insert_post_visits_one(object: {post_id: $post_id, visited_from: $visited_from}, on_conflict: {constraint: post_visits_pkey, update_columns: [visited_from]}) {
    __typename
  }
}


query GetVisitedPosts($afterVisitedTime: timestamptz = null, $beforeVisitedTime: timestamptz = null, $limit: Int = 10, $visitedTimeSortOrder: order_by = desc, $withCreatorProfile: Boolean! = true) {
  visitedPosts: post_visits(where: {visited_at: {_gt: $afterVisitedTime, _lte: $beforeVisitedTime}}, limit: $limit, order_by: {visited_at: $visitedTimeSortOrder}) {
    post: post {
      ...Post
    }
  }
}
